#include <stdio.h>
#include <string.h>

int isOperator(char ch) {
  if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^') {
    return 1;
  }
  return 0;
}

int getPrecedence(char ch) {
  switch (ch) {
    case '+':
    case '-':
      return 1;
    case '*':
    case '/':
      return 2;
    case '^':
      return 3;
    default:
      return 0;
  }
}

int push(char *stack, char ch) {
  int top = *stack;
  stack[++top] = ch;
  *stack = top;
  return 0;
}

char pop(char *stack) {
  int top = *stack;
  char ch = stack[top--];
  *stack = top;
  return ch;
}

void infixToPostfix(char *infix, char *postfix) {
  int top = -1;
  char stack[100];

  while (*infix) {
    if (*infix == '(') {
      push(stack, '(');
    } else if (*infix == ')') {
      while (pop(stack) != '(') {
        *postfix++ = pop(stack);
      }
    } else if (isOperator(*infix)) {
      while (top != -1 && getPrecedence(stack[top]) >= getPrecedence(*infix)) {
        *postfix++ = pop(stack);
      }
      push(stack, *infix);
    } else {
      *postfix++ = *infix;
    }
    infix++;
  }

  while (top != -1) {
    *postfix++ = pop(stack);
  }
  *postfix = '\0';
}

int evaluatePostfix(char *postfix) {
  int stack[100];
  int top = -1;

  while (*postfix) {
    if (isdigit(*postfix)) {
      push(stack, (*postfix) - 48);
    } else {
      int operand1 = pop(stack);
      int operand2 = pop(stack);

      switch (*postfix) {
        case
 
'+':
          push(stack, operand1 + operand2);
          break;
        case
 
'-':
          push(stack, operand2 - operand1);
          break;
        case
 
'*':
          push(stack, operand1 * operand2);
          break;
        case
 
'/':
          push(stack, operand2 / operand1);
          break;
        case '^':
          push(stack, operand2 ^ operand1);
          break;
      }
    }
    postfix++;
  }

  return stack[top];
}

int main() {
  char infixExpression[100];
  char postfixExpression[100];

  printf("Enter the infix expression: ");
  scanf("%s", infixExpression);

  infixToPostfix(infixExpression, postfixExpression);
  printf("Postfix expression: %s\n", postfixExpression);

  int result = evaluatePostfix(postfixExpression);
  printf("Evaluation of postfix expression: %d\n", result);

  return 0;
}
